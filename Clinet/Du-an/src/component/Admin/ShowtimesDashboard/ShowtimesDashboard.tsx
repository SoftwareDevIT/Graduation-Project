import React, { useState, useEffect } from 'react';

import ReactPaginate from 'react-paginate';



import './ShowtimesDashboard.css';
import { Showtime } from '../../../interface/Showtimes';
import instance from '../../../server';

const ShowtimesDashboard: React.FC = () => {
    const [showtimes, setShowtimes] = useState<Showtime[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const itemsPerPage = 2; // S·ªë l∆∞·ª£ng showtime tr√™n m·ªói trang
    const [currentPage, setCurrentPage] = useState(0);


    useEffect(() => {
        const fetchShowtimes = async () => {
            try {

                const response = await instance.get('/showtimes'); // C·∫≠p nh·∫≠t endpoint n·∫øu c·∫ßn

                const response = await instance.get<{ data: Showtime[] }>('/showtimes');

                console.log('API Response:', response.data);
                
                if (Array.isArray(response.data.data)) {
                    setShowtimes(response.data.data);
                } else {
                    console.error('ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng mong ƒë·ª£i', response.data);
                    setError('Kh√¥ng th·ªÉ l·∫•y showtime: ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng mong ƒë·ª£i');
                }
                setLoading(false);
            } catch (err) {
                console.error('L·ªói l·∫•y d·ªØ li·ªáu:', err);
                setError('Kh√¥ng th·ªÉ l·∫•y showtime');
                setLoading(false);
            }
        };

        fetchShowtimes();
    }, []);


    const pageCount = Math.ceil(showtimes.length / itemsPerPage);
    const handlePageClick = (data: { selected: number }) => {
        setCurrentPage(data.selected);
    };

    const currentShowtimes = showtimes.slice(currentPage * itemsPerPage, (currentPage + 1) * itemsPerPage);


    if (loading) {
        return <div>ƒêang t·∫£i...</div>;
    }

    if (error) {
        return <div>{error}</div>;
    }

    return (
        <div className="showtimes-management">

            <h2>Qu·∫£n l√Ω Showtime</h2>
            <div className="actions">
                <button className="add-showtime-btn">Th√™m Showtime M·ªõi</button>
            </div>

            <div className="table-container">
                <div className="table-header">
                    <h3>Danh S√°ch Showtime</h3>
                    <div className="add-showtime-container">
                        <button className="add-showtime-btn">Th√™m Showtime M·ªõi</button>
                    </div>
                </div>
                <table className="showtime-table">
                    <thead>
                        <tr>
                            <th>Phim</th>
                            <th>R·∫°p</th>
                            <th>Ng√†y</th>
                            <th>Gi·ªù</th>
                            <th>H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>

                        {Array.isArray(currentShowtimes) && currentShowtimes.length > 0 ? (
                            currentShowtimes.map((showtime) => (
                                <tr key={showtime.id}>
                                    <td>{showtime.movie.movie_name}</td>
                                    <td>{showtime.movie.cinema.cinema_name}</td>  
                                    <td>{showtime.showtime_date}</td>
                                    <td>{showtime.showtime_start}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">üëÅ</button>
                                        <button className="edit-btn">‚úèÔ∏è</button>
                                        <button className="delete-btn">üóë</button>
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan={5}>Kh√¥ng c√≥ showtime n√†o</td>

                        {showtimes.map((showtime) => (
                            <tr key={showtime.id}>
                                <td>{showtime.movie.movie_name}</td>
                                <td>{showtime.movie.cinema.cinema_name}</td>  
                                <td>{showtime.showtime_date}</td>
                                <td>{showtime.showtime_start}</td>
                                <td className="action-buttons">
                                    <button className="view-btn">üëÅ</button>
                                    <button className="edit-btn">‚úèÔ∏è</button>
                                    <button className="delete-btn">üóë</button>
                                </td>

                            </tr>
                        )}
                    </tbody>
                </table>
                <ReactPaginate
                    breakLabel={"..."}
                    pageCount={pageCount}
                    marginPagesDisplayed={2}
                    pageRangeDisplayed={4}
                    onPageChange={handlePageClick}
                    containerClassName={"pagination"}
                    pageClassName={"page-item"}
                    pageLinkClassName={"page-link"}
                    activeClassName={"active"}
                />
            </div>
        </div>
    );
};

export default ShowtimesDashboard;
